// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation.h"

// force_calculator_type_t
// 

force_calculator_type_t::
force_calculator_type_t (value v)
: ::xml_schema::string (_xsd_force_calculator_type_t_literals_[v])
{
}

force_calculator_type_t::
force_calculator_type_t (const char* v)
: ::xml_schema::string (v)
{
}

force_calculator_type_t::
force_calculator_type_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

force_calculator_type_t::
force_calculator_type_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

force_calculator_type_t::
force_calculator_type_t (const force_calculator_type_t& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

force_calculator_type_t& force_calculator_type_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_force_calculator_type_t_literals_[v]);

  return *this;
}


// simulation_mode_type_t
// 

simulation_mode_type_t::
simulation_mode_type_t (value v)
: ::xml_schema::string (_xsd_simulation_mode_type_t_literals_[v])
{
}

simulation_mode_type_t::
simulation_mode_type_t (const char* v)
: ::xml_schema::string (v)
{
}

simulation_mode_type_t::
simulation_mode_type_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

simulation_mode_type_t::
simulation_mode_type_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

simulation_mode_type_t::
simulation_mode_type_t (const simulation_mode_type_t& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

simulation_mode_type_t& simulation_mode_type_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_simulation_mode_type_t_literals_[v]);

  return *this;
}


// boundary_type_t
// 

boundary_type_t::
boundary_type_t (value v)
: ::xml_schema::string (_xsd_boundary_type_t_literals_[v])
{
}

boundary_type_t::
boundary_type_t (const char* v)
: ::xml_schema::string (v)
{
}

boundary_type_t::
boundary_type_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

boundary_type_t::
boundary_type_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

boundary_type_t::
boundary_type_t (const boundary_type_t& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

boundary_type_t& boundary_type_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_boundary_type_t_literals_[v]);

  return *this;
}


// boundary_t
// 

const boundary_t::x_0_type& boundary_t::
x_0 () const
{
  return this->x_0_.get ();
}

boundary_t::x_0_type& boundary_t::
x_0 ()
{
  return this->x_0_.get ();
}

void boundary_t::
x_0 (const x_0_type& x)
{
  this->x_0_.set (x);
}

void boundary_t::
x_0 (::std::auto_ptr< x_0_type > x)
{
  this->x_0_.set (x);
}

const boundary_t::x_max_type& boundary_t::
x_max () const
{
  return this->x_max_.get ();
}

boundary_t::x_max_type& boundary_t::
x_max ()
{
  return this->x_max_.get ();
}

void boundary_t::
x_max (const x_max_type& x)
{
  this->x_max_.set (x);
}

void boundary_t::
x_max (::std::auto_ptr< x_max_type > x)
{
  this->x_max_.set (x);
}

const boundary_t::y_0_type& boundary_t::
y_0 () const
{
  return this->y_0_.get ();
}

boundary_t::y_0_type& boundary_t::
y_0 ()
{
  return this->y_0_.get ();
}

void boundary_t::
y_0 (const y_0_type& x)
{
  this->y_0_.set (x);
}

void boundary_t::
y_0 (::std::auto_ptr< y_0_type > x)
{
  this->y_0_.set (x);
}

const boundary_t::y_max_type& boundary_t::
y_max () const
{
  return this->y_max_.get ();
}

boundary_t::y_max_type& boundary_t::
y_max ()
{
  return this->y_max_.get ();
}

void boundary_t::
y_max (const y_max_type& x)
{
  this->y_max_.set (x);
}

void boundary_t::
y_max (::std::auto_ptr< y_max_type > x)
{
  this->y_max_.set (x);
}

const boundary_t::z_0_type& boundary_t::
z_0 () const
{
  return this->z_0_.get ();
}

boundary_t::z_0_type& boundary_t::
z_0 ()
{
  return this->z_0_.get ();
}

void boundary_t::
z_0 (const z_0_type& x)
{
  this->z_0_.set (x);
}

void boundary_t::
z_0 (::std::auto_ptr< z_0_type > x)
{
  this->z_0_.set (x);
}

const boundary_t::z_max_type& boundary_t::
z_max () const
{
  return this->z_max_.get ();
}

boundary_t::z_max_type& boundary_t::
z_max ()
{
  return this->z_max_.get ();
}

void boundary_t::
z_max (const z_max_type& x)
{
  this->z_max_.set (x);
}

void boundary_t::
z_max (::std::auto_ptr< z_max_type > x)
{
  this->z_max_.set (x);
}


// force_calculator_t
// 

const force_calculator_t::type_type& force_calculator_t::
type () const
{
  return this->type_.get ();
}

force_calculator_t::type_type& force_calculator_t::
type ()
{
  return this->type_.get ();
}

void force_calculator_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void force_calculator_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const force_calculator_t::epsilon_optional& force_calculator_t::
epsilon () const
{
  return this->epsilon_;
}

force_calculator_t::epsilon_optional& force_calculator_t::
epsilon ()
{
  return this->epsilon_;
}

void force_calculator_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void force_calculator_t::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const force_calculator_t::sigma_optional& force_calculator_t::
sigma () const
{
  return this->sigma_;
}

force_calculator_t::sigma_optional& force_calculator_t::
sigma ()
{
  return this->sigma_;
}

void force_calculator_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void force_calculator_t::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}


// simulation_mode_t
// 

const simulation_mode_t::type_type& simulation_mode_t::
type () const
{
  return this->type_.get ();
}

simulation_mode_t::type_type& simulation_mode_t::
type ()
{
  return this->type_.get ();
}

void simulation_mode_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void simulation_mode_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const simulation_mode_t::cutoff_radius_optional& simulation_mode_t::
cutoff_radius () const
{
  return this->cutoff_radius_;
}

simulation_mode_t::cutoff_radius_optional& simulation_mode_t::
cutoff_radius ()
{
  return this->cutoff_radius_;
}

void simulation_mode_t::
cutoff_radius (const cutoff_radius_type& x)
{
  this->cutoff_radius_.set (x);
}

void simulation_mode_t::
cutoff_radius (const cutoff_radius_optional& x)
{
  this->cutoff_radius_ = x;
}

const simulation_mode_t::domain_size_x_optional& simulation_mode_t::
domain_size_x () const
{
  return this->domain_size_x_;
}

simulation_mode_t::domain_size_x_optional& simulation_mode_t::
domain_size_x ()
{
  return this->domain_size_x_;
}

void simulation_mode_t::
domain_size_x (const domain_size_x_type& x)
{
  this->domain_size_x_.set (x);
}

void simulation_mode_t::
domain_size_x (const domain_size_x_optional& x)
{
  this->domain_size_x_ = x;
}

const simulation_mode_t::domain_size_y_optional& simulation_mode_t::
domain_size_y () const
{
  return this->domain_size_y_;
}

simulation_mode_t::domain_size_y_optional& simulation_mode_t::
domain_size_y ()
{
  return this->domain_size_y_;
}

void simulation_mode_t::
domain_size_y (const domain_size_y_type& x)
{
  this->domain_size_y_.set (x);
}

void simulation_mode_t::
domain_size_y (const domain_size_y_optional& x)
{
  this->domain_size_y_ = x;
}

const simulation_mode_t::domain_size_z_optional& simulation_mode_t::
domain_size_z () const
{
  return this->domain_size_z_;
}

simulation_mode_t::domain_size_z_optional& simulation_mode_t::
domain_size_z ()
{
  return this->domain_size_z_;
}

void simulation_mode_t::
domain_size_z (const domain_size_z_type& x)
{
  this->domain_size_z_.set (x);
}

void simulation_mode_t::
domain_size_z (const domain_size_z_optional& x)
{
  this->domain_size_z_ = x;
}

const simulation_mode_t::boundary_optional& simulation_mode_t::
boundary () const
{
  return this->boundary_;
}

simulation_mode_t::boundary_optional& simulation_mode_t::
boundary ()
{
  return this->boundary_;
}

void simulation_mode_t::
boundary (const boundary_type& x)
{
  this->boundary_.set (x);
}

void simulation_mode_t::
boundary (const boundary_optional& x)
{
  this->boundary_ = x;
}

void simulation_mode_t::
boundary (::std::auto_ptr< boundary_type > x)
{
  this->boundary_.set (x);
}


// simulation_parameters_t
// 

const simulation_parameters_t::start_time_type& simulation_parameters_t::
start_time () const
{
  return this->start_time_.get ();
}

simulation_parameters_t::start_time_type& simulation_parameters_t::
start_time ()
{
  return this->start_time_.get ();
}

void simulation_parameters_t::
start_time (const start_time_type& x)
{
  this->start_time_.set (x);
}

const simulation_parameters_t::end_time_type& simulation_parameters_t::
end_time () const
{
  return this->end_time_.get ();
}

simulation_parameters_t::end_time_type& simulation_parameters_t::
end_time ()
{
  return this->end_time_.get ();
}

void simulation_parameters_t::
end_time (const end_time_type& x)
{
  this->end_time_.set (x);
}

const simulation_parameters_t::delta_t_type& simulation_parameters_t::
delta_t () const
{
  return this->delta_t_.get ();
}

simulation_parameters_t::delta_t_type& simulation_parameters_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void simulation_parameters_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const simulation_parameters_t::force_calculator_type& simulation_parameters_t::
force_calculator () const
{
  return this->force_calculator_.get ();
}

simulation_parameters_t::force_calculator_type& simulation_parameters_t::
force_calculator ()
{
  return this->force_calculator_.get ();
}

void simulation_parameters_t::
force_calculator (const force_calculator_type& x)
{
  this->force_calculator_.set (x);
}

void simulation_parameters_t::
force_calculator (::std::auto_ptr< force_calculator_type > x)
{
  this->force_calculator_.set (x);
}

const simulation_parameters_t::simulation_mode_type& simulation_parameters_t::
simulation_mode () const
{
  return this->simulation_mode_.get ();
}

simulation_parameters_t::simulation_mode_type& simulation_parameters_t::
simulation_mode ()
{
  return this->simulation_mode_.get ();
}

void simulation_parameters_t::
simulation_mode (const simulation_mode_type& x)
{
  this->simulation_mode_.set (x);
}

void simulation_parameters_t::
simulation_mode (::std::auto_ptr< simulation_mode_type > x)
{
  this->simulation_mode_.set (x);
}


// cuboid_t
// 

const cuboid_t::x1_type& cuboid_t::
x1 () const
{
  return this->x1_.get ();
}

cuboid_t::x1_type& cuboid_t::
x1 ()
{
  return this->x1_.get ();
}

void cuboid_t::
x1 (const x1_type& x)
{
  this->x1_.set (x);
}

const cuboid_t::x2_type& cuboid_t::
x2 () const
{
  return this->x2_.get ();
}

cuboid_t::x2_type& cuboid_t::
x2 ()
{
  return this->x2_.get ();
}

void cuboid_t::
x2 (const x2_type& x)
{
  this->x2_.set (x);
}

const cuboid_t::x3_type& cuboid_t::
x3 () const
{
  return this->x3_.get ();
}

cuboid_t::x3_type& cuboid_t::
x3 ()
{
  return this->x3_.get ();
}

void cuboid_t::
x3 (const x3_type& x)
{
  this->x3_.set (x);
}

const cuboid_t::n1_type& cuboid_t::
n1 () const
{
  return this->n1_.get ();
}

cuboid_t::n1_type& cuboid_t::
n1 ()
{
  return this->n1_.get ();
}

void cuboid_t::
n1 (const n1_type& x)
{
  this->n1_.set (x);
}

const cuboid_t::n2_type& cuboid_t::
n2 () const
{
  return this->n2_.get ();
}

cuboid_t::n2_type& cuboid_t::
n2 ()
{
  return this->n2_.get ();
}

void cuboid_t::
n2 (const n2_type& x)
{
  this->n2_.set (x);
}

const cuboid_t::n3_type& cuboid_t::
n3 () const
{
  return this->n3_.get ();
}

cuboid_t::n3_type& cuboid_t::
n3 ()
{
  return this->n3_.get ();
}

void cuboid_t::
n3 (const n3_type& x)
{
  this->n3_.set (x);
}

const cuboid_t::h_type& cuboid_t::
h () const
{
  return this->h_.get ();
}

cuboid_t::h_type& cuboid_t::
h ()
{
  return this->h_.get ();
}

void cuboid_t::
h (const h_type& x)
{
  this->h_.set (x);
}

const cuboid_t::m_type& cuboid_t::
m () const
{
  return this->m_.get ();
}

cuboid_t::m_type& cuboid_t::
m ()
{
  return this->m_.get ();
}

void cuboid_t::
m (const m_type& x)
{
  this->m_.set (x);
}

const cuboid_t::v1_type& cuboid_t::
v1 () const
{
  return this->v1_.get ();
}

cuboid_t::v1_type& cuboid_t::
v1 ()
{
  return this->v1_.get ();
}

void cuboid_t::
v1 (const v1_type& x)
{
  this->v1_.set (x);
}

const cuboid_t::v2_type& cuboid_t::
v2 () const
{
  return this->v2_.get ();
}

cuboid_t::v2_type& cuboid_t::
v2 ()
{
  return this->v2_.get ();
}

void cuboid_t::
v2 (const v2_type& x)
{
  this->v2_.set (x);
}

const cuboid_t::v3_type& cuboid_t::
v3 () const
{
  return this->v3_.get ();
}

cuboid_t::v3_type& cuboid_t::
v3 ()
{
  return this->v3_.get ();
}

void cuboid_t::
v3 (const v3_type& x)
{
  this->v3_.set (x);
}


// sphere_t
// 

const sphere_t::x1_type& sphere_t::
x1 () const
{
  return this->x1_.get ();
}

sphere_t::x1_type& sphere_t::
x1 ()
{
  return this->x1_.get ();
}

void sphere_t::
x1 (const x1_type& x)
{
  this->x1_.set (x);
}

const sphere_t::x2_type& sphere_t::
x2 () const
{
  return this->x2_.get ();
}

sphere_t::x2_type& sphere_t::
x2 ()
{
  return this->x2_.get ();
}

void sphere_t::
x2 (const x2_type& x)
{
  this->x2_.set (x);
}

const sphere_t::x3_type& sphere_t::
x3 () const
{
  return this->x3_.get ();
}

sphere_t::x3_type& sphere_t::
x3 ()
{
  return this->x3_.get ();
}

void sphere_t::
x3 (const x3_type& x)
{
  this->x3_.set (x);
}

const sphere_t::r_type& sphere_t::
r () const
{
  return this->r_.get ();
}

sphere_t::r_type& sphere_t::
r ()
{
  return this->r_.get ();
}

void sphere_t::
r (const r_type& x)
{
  this->r_.set (x);
}

const sphere_t::h_type& sphere_t::
h () const
{
  return this->h_.get ();
}

sphere_t::h_type& sphere_t::
h ()
{
  return this->h_.get ();
}

void sphere_t::
h (const h_type& x)
{
  this->h_.set (x);
}

const sphere_t::m_type& sphere_t::
m () const
{
  return this->m_.get ();
}

sphere_t::m_type& sphere_t::
m ()
{
  return this->m_.get ();
}

void sphere_t::
m (const m_type& x)
{
  this->m_.set (x);
}

const sphere_t::v1_type& sphere_t::
v1 () const
{
  return this->v1_.get ();
}

sphere_t::v1_type& sphere_t::
v1 ()
{
  return this->v1_.get ();
}

void sphere_t::
v1 (const v1_type& x)
{
  this->v1_.set (x);
}

const sphere_t::v2_type& sphere_t::
v2 () const
{
  return this->v2_.get ();
}

sphere_t::v2_type& sphere_t::
v2 ()
{
  return this->v2_.get ();
}

void sphere_t::
v2 (const v2_type& x)
{
  this->v2_.set (x);
}

const sphere_t::v3_type& sphere_t::
v3 () const
{
  return this->v3_.get ();
}

sphere_t::v3_type& sphere_t::
v3 ()
{
  return this->v3_.get ();
}

void sphere_t::
v3 (const v3_type& x)
{
  this->v3_.set (x);
}


// simulation_input_t
// 

const simulation_input_t::particle_file_sequence& simulation_input_t::
particle_file () const
{
  return this->particle_file_;
}

simulation_input_t::particle_file_sequence& simulation_input_t::
particle_file ()
{
  return this->particle_file_;
}

void simulation_input_t::
particle_file (const particle_file_sequence& s)
{
  this->particle_file_ = s;
}

const simulation_input_t::cuboid_sequence& simulation_input_t::
cuboid () const
{
  return this->cuboid_;
}

simulation_input_t::cuboid_sequence& simulation_input_t::
cuboid ()
{
  return this->cuboid_;
}

void simulation_input_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const simulation_input_t::sphere_sequence& simulation_input_t::
sphere () const
{
  return this->sphere_;
}

simulation_input_t::sphere_sequence& simulation_input_t::
sphere ()
{
  return this->sphere_;
}

void simulation_input_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}


// simulation_output_t
// 

const simulation_output_t::base_filename_type& simulation_output_t::
base_filename () const
{
  return this->base_filename_.get ();
}

simulation_output_t::base_filename_type& simulation_output_t::
base_filename ()
{
  return this->base_filename_.get ();
}

void simulation_output_t::
base_filename (const base_filename_type& x)
{
  this->base_filename_.set (x);
}

void simulation_output_t::
base_filename (::std::auto_ptr< base_filename_type > x)
{
  this->base_filename_.set (x);
}

const simulation_output_t::output_freq_type& simulation_output_t::
output_freq () const
{
  return this->output_freq_.get ();
}

simulation_output_t::output_freq_type& simulation_output_t::
output_freq ()
{
  return this->output_freq_.get ();
}

void simulation_output_t::
output_freq (const output_freq_type& x)
{
  this->output_freq_.set (x);
}


// simulation_t
// 

const simulation_t::parameter_type& simulation_t::
parameter () const
{
  return this->parameter_.get ();
}

simulation_t::parameter_type& simulation_t::
parameter ()
{
  return this->parameter_.get ();
}

void simulation_t::
parameter (const parameter_type& x)
{
  this->parameter_.set (x);
}

void simulation_t::
parameter (::std::auto_ptr< parameter_type > x)
{
  this->parameter_.set (x);
}

const simulation_t::input_type& simulation_t::
input () const
{
  return this->input_.get ();
}

simulation_t::input_type& simulation_t::
input ()
{
  return this->input_.get ();
}

void simulation_t::
input (const input_type& x)
{
  this->input_.set (x);
}

void simulation_t::
input (::std::auto_ptr< input_type > x)
{
  this->input_.set (x);
}

const simulation_t::output_type& simulation_t::
output () const
{
  return this->output_.get ();
}

simulation_t::output_type& simulation_t::
output ()
{
  return this->output_.get ();
}

void simulation_t::
output (const output_type& x)
{
  this->output_.set (x);
}

void simulation_t::
output (::std::auto_ptr< output_type > x)
{
  this->output_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// force_calculator_type_t
//

force_calculator_type_t::
force_calculator_type_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_force_calculator_type_t_convert ();
}

force_calculator_type_t::
force_calculator_type_t (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_force_calculator_type_t_convert ();
}

force_calculator_type_t::
force_calculator_type_t (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_force_calculator_type_t_convert ();
}

force_calculator_type_t* force_calculator_type_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class force_calculator_type_t (*this, f, c);
}

force_calculator_type_t::value force_calculator_type_t::
_xsd_force_calculator_type_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_force_calculator_type_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_force_calculator_type_t_indexes_,
                    _xsd_force_calculator_type_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_force_calculator_type_t_indexes_ + 2 || _xsd_force_calculator_type_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const force_calculator_type_t::
_xsd_force_calculator_type_t_literals_[2] =
{
  "gravity",
  "lennard-jones"
};

const force_calculator_type_t::value force_calculator_type_t::
_xsd_force_calculator_type_t_indexes_[2] =
{
  ::force_calculator_type_t::gravity,
  ::force_calculator_type_t::lennard_jones
};

// simulation_mode_type_t
//

simulation_mode_type_t::
simulation_mode_type_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_simulation_mode_type_t_convert ();
}

simulation_mode_type_t::
simulation_mode_type_t (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_simulation_mode_type_t_convert ();
}

simulation_mode_type_t::
simulation_mode_type_t (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_simulation_mode_type_t_convert ();
}

simulation_mode_type_t* simulation_mode_type_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_mode_type_t (*this, f, c);
}

simulation_mode_type_t::value simulation_mode_type_t::
_xsd_simulation_mode_type_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_simulation_mode_type_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_simulation_mode_type_t_indexes_,
                    _xsd_simulation_mode_type_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_simulation_mode_type_t_indexes_ + 2 || _xsd_simulation_mode_type_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const simulation_mode_type_t::
_xsd_simulation_mode_type_t_literals_[2] =
{
  "normal",
  "linked-cell"
};

const simulation_mode_type_t::value simulation_mode_type_t::
_xsd_simulation_mode_type_t_indexes_[2] =
{
  ::simulation_mode_type_t::linked_cell,
  ::simulation_mode_type_t::normal
};

// boundary_type_t
//

boundary_type_t::
boundary_type_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_boundary_type_t_convert ();
}

boundary_type_t::
boundary_type_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_boundary_type_t_convert ();
}

boundary_type_t::
boundary_type_t (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_boundary_type_t_convert ();
}

boundary_type_t* boundary_type_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundary_type_t (*this, f, c);
}

boundary_type_t::value boundary_type_t::
_xsd_boundary_type_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_boundary_type_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_boundary_type_t_indexes_,
                    _xsd_boundary_type_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_boundary_type_t_indexes_ + 2 || _xsd_boundary_type_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const boundary_type_t::
_xsd_boundary_type_t_literals_[2] =
{
  "outflow",
  "reflect"
};

const boundary_type_t::value boundary_type_t::
_xsd_boundary_type_t_indexes_[2] =
{
  ::boundary_type_t::outflow,
  ::boundary_type_t::reflect
};

// boundary_t
//

boundary_t::
boundary_t (const x_0_type& x_0,
            const x_max_type& x_max,
            const y_0_type& y_0,
            const y_max_type& y_max,
            const z_0_type& z_0,
            const z_max_type& z_max)
: ::xml_schema::type (),
  x_0_ (x_0, ::xml_schema::flags (), this),
  x_max_ (x_max, ::xml_schema::flags (), this),
  y_0_ (y_0, ::xml_schema::flags (), this),
  y_max_ (y_max, ::xml_schema::flags (), this),
  z_0_ (z_0, ::xml_schema::flags (), this),
  z_max_ (z_max, ::xml_schema::flags (), this)
{
}

boundary_t::
boundary_t (const boundary_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_0_ (x.x_0_, f, this),
  x_max_ (x.x_max_, f, this),
  y_0_ (x.y_0_, f, this),
  y_max_ (x.y_max_, f, this),
  z_0_ (x.z_0_, f, this),
  z_max_ (x.z_max_, f, this)
{
}

boundary_t::
boundary_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_0_ (f, this),
  x_max_ (f, this),
  y_0_ (f, this),
  y_max_ (f, this),
  z_0_ (f, this),
  z_max_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void boundary_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "x_0" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< x_0_type > r (
        x_0_traits::create (i, f, this));

      this->x_0_.set (r);
      continue;
    }

    if (n.name () == "x_max" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< x_max_type > r (
        x_max_traits::create (i, f, this));

      this->x_max_.set (r);
      continue;
    }

    if (n.name () == "y_0" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< y_0_type > r (
        y_0_traits::create (i, f, this));

      this->y_0_.set (r);
      continue;
    }

    if (n.name () == "y_max" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< y_max_type > r (
        y_max_traits::create (i, f, this));

      this->y_max_.set (r);
      continue;
    }

    if (n.name () == "z_0" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< z_0_type > r (
        z_0_traits::create (i, f, this));

      this->z_0_.set (r);
      continue;
    }

    if (n.name () == "z_max" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< z_max_type > r (
        z_max_traits::create (i, f, this));

      this->z_max_.set (r);
      continue;
    }
  }

  if (!x_0_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x_0",
      "");
  }

  if (!x_max_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x_max",
      "");
  }

  if (!y_0_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y_0",
      "");
  }

  if (!y_max_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y_max",
      "");
  }

  if (!z_0_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "z_0",
      "");
  }

  if (!z_max_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "z_max",
      "");
  }
}

boundary_t* boundary_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundary_t (*this, f, c);
}

boundary_t::
~boundary_t ()
{
}

// force_calculator_t
//

force_calculator_t::
force_calculator_t (const type_type& type)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  epsilon_ (::xml_schema::flags (), this),
  sigma_ (::xml_schema::flags (), this)
{
}

force_calculator_t::
force_calculator_t (const force_calculator_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this)
{
}

force_calculator_t::
force_calculator_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  epsilon_ (f, this),
  sigma_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void force_calculator_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

force_calculator_t* force_calculator_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class force_calculator_t (*this, f, c);
}

force_calculator_t::
~force_calculator_t ()
{
}

// simulation_mode_t
//

simulation_mode_t::
simulation_mode_t (const type_type& type)
: ::xml_schema::type (),
  type_ (type, ::xml_schema::flags (), this),
  cutoff_radius_ (::xml_schema::flags (), this),
  domain_size_x_ (::xml_schema::flags (), this),
  domain_size_y_ (::xml_schema::flags (), this),
  domain_size_z_ (::xml_schema::flags (), this),
  boundary_ (::xml_schema::flags (), this)
{
}

simulation_mode_t::
simulation_mode_t (const simulation_mode_t& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  type_ (x.type_, f, this),
  cutoff_radius_ (x.cutoff_radius_, f, this),
  domain_size_x_ (x.domain_size_x_, f, this),
  domain_size_y_ (x.domain_size_y_, f, this),
  domain_size_z_ (x.domain_size_z_, f, this),
  boundary_ (x.boundary_, f, this)
{
}

simulation_mode_t::
simulation_mode_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  type_ (f, this),
  cutoff_radius_ (f, this),
  domain_size_x_ (f, this),
  domain_size_y_ (f, this),
  domain_size_z_ (f, this),
  boundary_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_mode_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    // cutoff_radius
    //
    if (n.name () == "cutoff_radius" && n.namespace_ ().empty ())
    {
      if (!this->cutoff_radius_)
      {
        this->cutoff_radius_.set (cutoff_radius_traits::create (i, f, this));
        continue;
      }
    }

    // domain_size_x
    //
    if (n.name () == "domain_size_x" && n.namespace_ ().empty ())
    {
      if (!this->domain_size_x_)
      {
        this->domain_size_x_.set (domain_size_x_traits::create (i, f, this));
        continue;
      }
    }

    // domain_size_y
    //
    if (n.name () == "domain_size_y" && n.namespace_ ().empty ())
    {
      if (!this->domain_size_y_)
      {
        this->domain_size_y_.set (domain_size_y_traits::create (i, f, this));
        continue;
      }
    }

    // domain_size_z
    //
    if (n.name () == "domain_size_z" && n.namespace_ ().empty ())
    {
      if (!this->domain_size_z_)
      {
        this->domain_size_z_.set (domain_size_z_traits::create (i, f, this));
        continue;
      }
    }

    // boundary
    //
    if (n.name () == "boundary" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< boundary_type > r (
        boundary_traits::create (i, f, this));

      if (!this->boundary_)
      {
        this->boundary_.set (r);
        continue;
      }
    }

    break;
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

simulation_mode_t* simulation_mode_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_mode_t (*this, f, c);
}

simulation_mode_t::
~simulation_mode_t ()
{
}

// simulation_parameters_t
//

simulation_parameters_t::
simulation_parameters_t (const start_time_type& start_time,
                         const end_time_type& end_time,
                         const delta_t_type& delta_t,
                         const force_calculator_type& force_calculator,
                         const simulation_mode_type& simulation_mode)
: ::xml_schema::type (),
  start_time_ (start_time, ::xml_schema::flags (), this),
  end_time_ (end_time, ::xml_schema::flags (), this),
  delta_t_ (delta_t, ::xml_schema::flags (), this),
  force_calculator_ (force_calculator, ::xml_schema::flags (), this),
  simulation_mode_ (simulation_mode, ::xml_schema::flags (), this)
{
}

simulation_parameters_t::
simulation_parameters_t (const start_time_type& start_time,
                         const end_time_type& end_time,
                         const delta_t_type& delta_t,
                         ::std::auto_ptr< force_calculator_type >& force_calculator,
                         ::std::auto_ptr< simulation_mode_type >& simulation_mode)
: ::xml_schema::type (),
  start_time_ (start_time, ::xml_schema::flags (), this),
  end_time_ (end_time, ::xml_schema::flags (), this),
  delta_t_ (delta_t, ::xml_schema::flags (), this),
  force_calculator_ (force_calculator, ::xml_schema::flags (), this),
  simulation_mode_ (simulation_mode, ::xml_schema::flags (), this)
{
}

simulation_parameters_t::
simulation_parameters_t (const simulation_parameters_t& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  start_time_ (x.start_time_, f, this),
  end_time_ (x.end_time_, f, this),
  delta_t_ (x.delta_t_, f, this),
  force_calculator_ (x.force_calculator_, f, this),
  simulation_mode_ (x.simulation_mode_, f, this)
{
}

simulation_parameters_t::
simulation_parameters_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  start_time_ (f, this),
  end_time_ (f, this),
  delta_t_ (f, this),
  force_calculator_ (f, this),
  simulation_mode_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_parameters_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // start-time
    //
    if (n.name () == "start-time" && n.namespace_ ().empty ())
    {
      if (!start_time_.present ())
      {
        this->start_time_.set (start_time_traits::create (i, f, this));
        continue;
      }
    }

    // end-time
    //
    if (n.name () == "end-time" && n.namespace_ ().empty ())
    {
      if (!end_time_.present ())
      {
        this->end_time_.set (end_time_traits::create (i, f, this));
        continue;
      }
    }

    // delta-t
    //
    if (n.name () == "delta-t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // force-calculator
    //
    if (n.name () == "force-calculator" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< force_calculator_type > r (
        force_calculator_traits::create (i, f, this));

      if (!force_calculator_.present ())
      {
        this->force_calculator_.set (r);
        continue;
      }
    }

    // simulation-mode
    //
    if (n.name () == "simulation-mode" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< simulation_mode_type > r (
        simulation_mode_traits::create (i, f, this));

      if (!simulation_mode_.present ())
      {
        this->simulation_mode_.set (r);
        continue;
      }
    }

    break;
  }

  if (!start_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start-time",
      "");
  }

  if (!end_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "end-time",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta-t",
      "");
  }

  if (!force_calculator_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "force-calculator",
      "");
  }

  if (!simulation_mode_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulation-mode",
      "");
  }
}

simulation_parameters_t* simulation_parameters_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_parameters_t (*this, f, c);
}

simulation_parameters_t::
~simulation_parameters_t ()
{
}

// cuboid_t
//

cuboid_t::
cuboid_t (const x1_type& x1,
          const x2_type& x2,
          const x3_type& x3,
          const n1_type& n1,
          const n2_type& n2,
          const n3_type& n3,
          const h_type& h,
          const m_type& m,
          const v1_type& v1,
          const v2_type& v2,
          const v3_type& v3)
: ::xml_schema::type (),
  x1_ (x1, ::xml_schema::flags (), this),
  x2_ (x2, ::xml_schema::flags (), this),
  x3_ (x3, ::xml_schema::flags (), this),
  n1_ (n1, ::xml_schema::flags (), this),
  n2_ (n2, ::xml_schema::flags (), this),
  n3_ (n3, ::xml_schema::flags (), this),
  h_ (h, ::xml_schema::flags (), this),
  m_ (m, ::xml_schema::flags (), this),
  v1_ (v1, ::xml_schema::flags (), this),
  v2_ (v2, ::xml_schema::flags (), this),
  v3_ (v3, ::xml_schema::flags (), this)
{
}

cuboid_t::
cuboid_t (const cuboid_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x1_ (x.x1_, f, this),
  x2_ (x.x2_, f, this),
  x3_ (x.x3_, f, this),
  n1_ (x.n1_, f, this),
  n2_ (x.n2_, f, this),
  n3_ (x.n3_, f, this),
  h_ (x.h_, f, this),
  m_ (x.m_, f, this),
  v1_ (x.v1_, f, this),
  v2_ (x.v2_, f, this),
  v3_ (x.v3_, f, this)
{
}

cuboid_t::
cuboid_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x1_ (f, this),
  x2_ (f, this),
  x3_ (f, this),
  n1_ (f, this),
  n2_ (f, this),
  n3_ (f, this),
  h_ (f, this),
  m_ (f, this),
  v1_ (f, this),
  v2_ (f, this),
  v3_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void cuboid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "x1" && n.namespace_ ().empty ())
    {
      this->x1_.set (x1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x2" && n.namespace_ ().empty ())
    {
      this->x2_.set (x2_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x3" && n.namespace_ ().empty ())
    {
      this->x3_.set (x3_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "n1" && n.namespace_ ().empty ())
    {
      this->n1_.set (n1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "n2" && n.namespace_ ().empty ())
    {
      this->n2_.set (n2_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "n3" && n.namespace_ ().empty ())
    {
      this->n3_.set (n3_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (h_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "m" && n.namespace_ ().empty ())
    {
      this->m_.set (m_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v1" && n.namespace_ ().empty ())
    {
      this->v1_.set (v1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v2" && n.namespace_ ().empty ())
    {
      this->v2_.set (v2_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v3" && n.namespace_ ().empty ())
    {
      this->v3_.set (v3_traits::create (i, f, this));
      continue;
    }
  }

  if (!x1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x1",
      "");
  }

  if (!x2_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x2",
      "");
  }

  if (!x3_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x3",
      "");
  }

  if (!n1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "n1",
      "");
  }

  if (!n2_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "n2",
      "");
  }

  if (!n3_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "n3",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "h",
      "");
  }

  if (!m_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "m",
      "");
  }

  if (!v1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v1",
      "");
  }

  if (!v2_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v2",
      "");
  }

  if (!v3_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v3",
      "");
  }
}

cuboid_t* cuboid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid_t (*this, f, c);
}

cuboid_t::
~cuboid_t ()
{
}

// sphere_t
//

sphere_t::
sphere_t (const x1_type& x1,
          const x2_type& x2,
          const x3_type& x3,
          const r_type& r,
          const h_type& h,
          const m_type& m,
          const v1_type& v1,
          const v2_type& v2,
          const v3_type& v3)
: ::xml_schema::type (),
  x1_ (x1, ::xml_schema::flags (), this),
  x2_ (x2, ::xml_schema::flags (), this),
  x3_ (x3, ::xml_schema::flags (), this),
  r_ (r, ::xml_schema::flags (), this),
  h_ (h, ::xml_schema::flags (), this),
  m_ (m, ::xml_schema::flags (), this),
  v1_ (v1, ::xml_schema::flags (), this),
  v2_ (v2, ::xml_schema::flags (), this),
  v3_ (v3, ::xml_schema::flags (), this)
{
}

sphere_t::
sphere_t (const sphere_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x1_ (x.x1_, f, this),
  x2_ (x.x2_, f, this),
  x3_ (x.x3_, f, this),
  r_ (x.r_, f, this),
  h_ (x.h_, f, this),
  m_ (x.m_, f, this),
  v1_ (x.v1_, f, this),
  v2_ (x.v2_, f, this),
  v3_ (x.v3_, f, this)
{
}

sphere_t::
sphere_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x1_ (f, this),
  x2_ (f, this),
  x3_ (f, this),
  r_ (f, this),
  h_ (f, this),
  m_ (f, this),
  v1_ (f, this),
  v2_ (f, this),
  v3_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void sphere_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "x1" && n.namespace_ ().empty ())
    {
      this->x1_.set (x1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x2" && n.namespace_ ().empty ())
    {
      this->x2_.set (x2_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x3" && n.namespace_ ().empty ())
    {
      this->x3_.set (x3_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "r" && n.namespace_ ().empty ())
    {
      this->r_.set (r_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (h_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "m" && n.namespace_ ().empty ())
    {
      this->m_.set (m_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v1" && n.namespace_ ().empty ())
    {
      this->v1_.set (v1_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v2" && n.namespace_ ().empty ())
    {
      this->v2_.set (v2_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "v3" && n.namespace_ ().empty ())
    {
      this->v3_.set (v3_traits::create (i, f, this));
      continue;
    }
  }

  if (!x1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x1",
      "");
  }

  if (!x2_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x2",
      "");
  }

  if (!x3_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x3",
      "");
  }

  if (!r_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "r",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "h",
      "");
  }

  if (!m_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "m",
      "");
  }

  if (!v1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v1",
      "");
  }

  if (!v2_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v2",
      "");
  }

  if (!v3_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "v3",
      "");
  }
}

sphere_t* sphere_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere_t (*this, f, c);
}

sphere_t::
~sphere_t ()
{
}

// simulation_input_t
//

simulation_input_t::
simulation_input_t ()
: ::xml_schema::type (),
  particle_file_ (::xml_schema::flags (), this),
  cuboid_ (::xml_schema::flags (), this),
  sphere_ (::xml_schema::flags (), this)
{
}

simulation_input_t::
simulation_input_t (const simulation_input_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_file_ (x.particle_file_, f, this),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this)
{
}

simulation_input_t::
simulation_input_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_file_ (f, this),
  cuboid_ (f, this),
  sphere_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_input_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle_file
    //
    if (n.name () == "particle_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< particle_file_type > r (
        particle_file_traits::create (i, f, this));

      this->particle_file_.push_back (r);
      continue;
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (r);
      continue;
    }

    break;
  }
}

simulation_input_t* simulation_input_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_input_t (*this, f, c);
}

simulation_input_t::
~simulation_input_t ()
{
}

// simulation_output_t
//

simulation_output_t::
simulation_output_t (const base_filename_type& base_filename,
                     const output_freq_type& output_freq)
: ::xml_schema::type (),
  base_filename_ (base_filename, ::xml_schema::flags (), this),
  output_freq_ (output_freq, ::xml_schema::flags (), this)
{
}

simulation_output_t::
simulation_output_t (const simulation_output_t& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  base_filename_ (x.base_filename_, f, this),
  output_freq_ (x.output_freq_, f, this)
{
}

simulation_output_t::
simulation_output_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  base_filename_ (f, this),
  output_freq_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_output_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // base_filename
    //
    if (n.name () == "base_filename" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< base_filename_type > r (
        base_filename_traits::create (i, f, this));

      if (!base_filename_.present ())
      {
        this->base_filename_.set (r);
        continue;
      }
    }

    // output_freq
    //
    if (n.name () == "output_freq" && n.namespace_ ().empty ())
    {
      if (!output_freq_.present ())
      {
        this->output_freq_.set (output_freq_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!base_filename_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "base_filename",
      "");
  }

  if (!output_freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "output_freq",
      "");
  }
}

simulation_output_t* simulation_output_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_output_t (*this, f, c);
}

simulation_output_t::
~simulation_output_t ()
{
}

// simulation_t
//

simulation_t::
simulation_t (const parameter_type& parameter,
              const input_type& input,
              const output_type& output)
: ::xml_schema::type (),
  parameter_ (parameter, ::xml_schema::flags (), this),
  input_ (input, ::xml_schema::flags (), this),
  output_ (output, ::xml_schema::flags (), this)
{
}

simulation_t::
simulation_t (::std::auto_ptr< parameter_type >& parameter,
              ::std::auto_ptr< input_type >& input,
              ::std::auto_ptr< output_type >& output)
: ::xml_schema::type (),
  parameter_ (parameter, ::xml_schema::flags (), this),
  input_ (input, ::xml_schema::flags (), this),
  output_ (output, ::xml_schema::flags (), this)
{
}

simulation_t::
simulation_t (const simulation_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  parameter_ (x.parameter_, f, this),
  input_ (x.input_, f, this),
  output_ (x.output_, f, this)
{
}

simulation_t::
simulation_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameter_ (f, this),
  input_ (f, this),
  output_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void simulation_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameter
    //
    if (n.name () == "parameter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameter_type > r (
        parameter_traits::create (i, f, this));

      if (!parameter_.present ())
      {
        this->parameter_.set (r);
        continue;
      }
    }

    // input
    //
    if (n.name () == "input" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< input_type > r (
        input_traits::create (i, f, this));

      if (!input_.present ())
      {
        this->input_.set (r);
        continue;
      }
    }

    // output
    //
    if (n.name () == "output" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< output_type > r (
        output_traits::create (i, f, this));

      if (!output_.present ())
      {
        this->output_.set (r);
        continue;
      }
    }

    break;
  }

  if (!parameter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "parameter",
      "");
  }

  if (!input_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "input",
      "");
  }

  if (!output_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "output",
      "");
  }
}

simulation_t* simulation_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_t (*this, f, c);
}

simulation_t::
~simulation_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::simulation_t > r (
    ::simulation (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::simulation_t >
simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::simulation_t > r (
      ::simulation (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::auto_ptr< ::simulation_t >
simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

