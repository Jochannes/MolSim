// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SRC_XMLINPUT_SIMULATION_H
#define SRC_XMLINPUT_SIMULATION_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

// changed version from 3030000L to 3029951L for compatability. :D
#if (XSD_INT_VERSION != 3029951L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class force_calculator_type_t;
class simulation_mode_type_t;
class force_calculator_t;
class simulation_mode_t;
class simulation_parameters_t;
class simulation_input_t;
class simulation_output_t;
class simulation_t;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class force_calculator_type_t: public ::xml_schema::string
{
  public:
  enum value
  {
    gravity,
    lennard_jones
  };

  force_calculator_type_t (value v);

  force_calculator_type_t (const char* v);

  force_calculator_type_t (const ::std::string& v);

  force_calculator_type_t (const ::xml_schema::string& v);

  force_calculator_type_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  force_calculator_type_t (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  force_calculator_type_t (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  force_calculator_type_t (const force_calculator_type_t& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual force_calculator_type_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  force_calculator_type_t&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_force_calculator_type_t_convert ();
  }

  protected:
  value
  _xsd_force_calculator_type_t_convert () const;

  public:
  static const char* const _xsd_force_calculator_type_t_literals_[2];
  static const value _xsd_force_calculator_type_t_indexes_[2];
};

class simulation_mode_type_t: public ::xml_schema::string
{
  public:
  enum value
  {
    normal,
    linked_cell
  };

  simulation_mode_type_t (value v);

  simulation_mode_type_t (const char* v);

  simulation_mode_type_t (const ::std::string& v);

  simulation_mode_type_t (const ::xml_schema::string& v);

  simulation_mode_type_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  simulation_mode_type_t (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  simulation_mode_type_t (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  simulation_mode_type_t (const simulation_mode_type_t& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual simulation_mode_type_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  simulation_mode_type_t&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_simulation_mode_type_t_convert ();
  }

  protected:
  value
  _xsd_simulation_mode_type_t_convert () const;

  public:
  static const char* const _xsd_simulation_mode_type_t_literals_[2];
  static const value _xsd_simulation_mode_type_t_indexes_[2];
};

class force_calculator_t: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::force_calculator_type_t type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // epsilon
  // 
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // sigma
  // 
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // Constructors.
  //
  force_calculator_t (const type_type&);

  force_calculator_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  force_calculator_t (const force_calculator_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual force_calculator_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~force_calculator_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  epsilon_optional epsilon_;
  sigma_optional sigma_;
};

class simulation_mode_t: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::simulation_mode_type_t type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // cutoff_radius
  // 
  typedef ::xml_schema::double_ cutoff_radius_type;
  typedef ::xsd::cxx::tree::optional< cutoff_radius_type > cutoff_radius_optional;
  typedef ::xsd::cxx::tree::traits< cutoff_radius_type, char, ::xsd::cxx::tree::schema_type::double_ > cutoff_radius_traits;

  const cutoff_radius_optional&
  cutoff_radius () const;

  cutoff_radius_optional&
  cutoff_radius ();

  void
  cutoff_radius (const cutoff_radius_type& x);

  void
  cutoff_radius (const cutoff_radius_optional& x);

  // domain_size_x
  // 
  typedef ::xml_schema::double_ domain_size_x_type;
  typedef ::xsd::cxx::tree::optional< domain_size_x_type > domain_size_x_optional;
  typedef ::xsd::cxx::tree::traits< domain_size_x_type, char, ::xsd::cxx::tree::schema_type::double_ > domain_size_x_traits;

  const domain_size_x_optional&
  domain_size_x () const;

  domain_size_x_optional&
  domain_size_x ();

  void
  domain_size_x (const domain_size_x_type& x);

  void
  domain_size_x (const domain_size_x_optional& x);

  // domain_size_y
  // 
  typedef ::xml_schema::double_ domain_size_y_type;
  typedef ::xsd::cxx::tree::optional< domain_size_y_type > domain_size_y_optional;
  typedef ::xsd::cxx::tree::traits< domain_size_y_type, char, ::xsd::cxx::tree::schema_type::double_ > domain_size_y_traits;

  const domain_size_y_optional&
  domain_size_y () const;

  domain_size_y_optional&
  domain_size_y ();

  void
  domain_size_y (const domain_size_y_type& x);

  void
  domain_size_y (const domain_size_y_optional& x);

  // Constructors.
  //
  simulation_mode_t (const type_type&);

  simulation_mode_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  simulation_mode_t (const simulation_mode_t& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual simulation_mode_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulation_mode_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  cutoff_radius_optional cutoff_radius_;
  domain_size_x_optional domain_size_x_;
  domain_size_y_optional domain_size_y_;
};

class simulation_parameters_t: public ::xml_schema::type
{
  public:
  // start-time
  // 
  typedef ::xml_schema::double_ start_time_type;
  typedef ::xsd::cxx::tree::traits< start_time_type, char, ::xsd::cxx::tree::schema_type::double_ > start_time_traits;

  const start_time_type&
  start_time () const;

  start_time_type&
  start_time ();

  void
  start_time (const start_time_type& x);

  // end-time
  // 
  typedef ::xml_schema::double_ end_time_type;
  typedef ::xsd::cxx::tree::traits< end_time_type, char, ::xsd::cxx::tree::schema_type::double_ > end_time_traits;

  const end_time_type&
  end_time () const;

  end_time_type&
  end_time ();

  void
  end_time (const end_time_type& x);

  // delta-t
  // 
  typedef ::xml_schema::double_ delta_t_type;
  typedef ::xsd::cxx::tree::traits< delta_t_type, char, ::xsd::cxx::tree::schema_type::double_ > delta_t_traits;

  const delta_t_type&
  delta_t () const;

  delta_t_type&
  delta_t ();

  void
  delta_t (const delta_t_type& x);

  // force-calculator
  // 
  typedef ::force_calculator_t force_calculator_type;
  typedef ::xsd::cxx::tree::traits< force_calculator_type, char > force_calculator_traits;

  const force_calculator_type&
  force_calculator () const;

  force_calculator_type&
  force_calculator ();

  void
  force_calculator (const force_calculator_type& x);

  void
  force_calculator (::std::auto_ptr< force_calculator_type > p);

  // simulation-mode
  // 
  typedef ::simulation_mode_t simulation_mode_type;
  typedef ::xsd::cxx::tree::traits< simulation_mode_type, char > simulation_mode_traits;

  const simulation_mode_type&
  simulation_mode () const;

  simulation_mode_type&
  simulation_mode ();

  void
  simulation_mode (const simulation_mode_type& x);

  void
  simulation_mode (::std::auto_ptr< simulation_mode_type > p);

  // Constructors.
  //
  simulation_parameters_t (const start_time_type&,
                           const end_time_type&,
                           const delta_t_type&,
                           const force_calculator_type&,
                           const simulation_mode_type&);

  simulation_parameters_t (const start_time_type&,
                           const end_time_type&,
                           const delta_t_type&,
                           ::std::auto_ptr< force_calculator_type >&,
                           ::std::auto_ptr< simulation_mode_type >&);

  simulation_parameters_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  simulation_parameters_t (const simulation_parameters_t& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

  virtual simulation_parameters_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulation_parameters_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< start_time_type > start_time_;
  ::xsd::cxx::tree::one< end_time_type > end_time_;
  ::xsd::cxx::tree::one< delta_t_type > delta_t_;
  ::xsd::cxx::tree::one< force_calculator_type > force_calculator_;
  ::xsd::cxx::tree::one< simulation_mode_type > simulation_mode_;
};

class simulation_input_t: public ::xml_schema::type
{
  public:
  // particle_file
  // 
  typedef ::xml_schema::string particle_file_type;
  typedef ::xsd::cxx::tree::sequence< particle_file_type > particle_file_sequence;
  typedef particle_file_sequence::iterator particle_file_iterator;
  typedef particle_file_sequence::const_iterator particle_file_const_iterator;
  typedef ::xsd::cxx::tree::traits< particle_file_type, char > particle_file_traits;

  const particle_file_sequence&
  particle_file () const;

  particle_file_sequence&
  particle_file ();

  void
  particle_file (const particle_file_sequence& s);

  // cuboid_file
  // 
  typedef ::xml_schema::string cuboid_file_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_file_type > cuboid_file_sequence;
  typedef cuboid_file_sequence::iterator cuboid_file_iterator;
  typedef cuboid_file_sequence::const_iterator cuboid_file_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_file_type, char > cuboid_file_traits;

  const cuboid_file_sequence&
  cuboid_file () const;

  cuboid_file_sequence&
  cuboid_file ();

  void
  cuboid_file (const cuboid_file_sequence& s);

  // sphere_file
  // 
  typedef ::xml_schema::string sphere_file_type;
  typedef ::xsd::cxx::tree::sequence< sphere_file_type > sphere_file_sequence;
  typedef sphere_file_sequence::iterator sphere_file_iterator;
  typedef sphere_file_sequence::const_iterator sphere_file_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_file_type, char > sphere_file_traits;

  const sphere_file_sequence&
  sphere_file () const;

  sphere_file_sequence&
  sphere_file ();

  void
  sphere_file (const sphere_file_sequence& s);

  // Constructors.
  //
  simulation_input_t ();

  simulation_input_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  simulation_input_t (const simulation_input_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual simulation_input_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulation_input_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  particle_file_sequence particle_file_;
  cuboid_file_sequence cuboid_file_;
  sphere_file_sequence sphere_file_;
};

class simulation_output_t: public ::xml_schema::type
{
  public:
  // base_filename
  // 
  typedef ::xml_schema::string base_filename_type;
  typedef ::xsd::cxx::tree::traits< base_filename_type, char > base_filename_traits;

  const base_filename_type&
  base_filename () const;

  base_filename_type&
  base_filename ();

  void
  base_filename (const base_filename_type& x);

  void
  base_filename (::std::auto_ptr< base_filename_type > p);

  // output_freq
  // 
  typedef ::xml_schema::unsigned_int output_freq_type;
  typedef ::xsd::cxx::tree::traits< output_freq_type, char > output_freq_traits;

  const output_freq_type&
  output_freq () const;

  output_freq_type&
  output_freq ();

  void
  output_freq (const output_freq_type& x);

  // Constructors.
  //
  simulation_output_t (const base_filename_type&,
                       const output_freq_type&);

  simulation_output_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  simulation_output_t (const simulation_output_t& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual simulation_output_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulation_output_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< base_filename_type > base_filename_;
  ::xsd::cxx::tree::one< output_freq_type > output_freq_;
};

class simulation_t: public ::xml_schema::type
{
  public:
  // parameter
  // 
  typedef ::simulation_parameters_t parameter_type;
  typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

  const parameter_type&
  parameter () const;

  parameter_type&
  parameter ();

  void
  parameter (const parameter_type& x);

  void
  parameter (::std::auto_ptr< parameter_type > p);

  // input
  // 
  typedef ::simulation_input_t input_type;
  typedef ::xsd::cxx::tree::traits< input_type, char > input_traits;

  const input_type&
  input () const;

  input_type&
  input ();

  void
  input (const input_type& x);

  void
  input (::std::auto_ptr< input_type > p);

  // output
  // 
  typedef ::simulation_output_t output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::auto_ptr< output_type > p);

  // Constructors.
  //
  simulation_t (const parameter_type&,
                const input_type&,
                const output_type&);

  simulation_t (::std::auto_ptr< parameter_type >&,
                ::std::auto_ptr< input_type >&,
                ::std::auto_ptr< output_type >&);

  simulation_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  simulation_t (const simulation_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual simulation_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~simulation_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< parameter_type > parameter_;
  ::xsd::cxx::tree::one< input_type > input_;
  ::xsd::cxx::tree::one< output_type > output_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::simulation_t >
simulation (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulation_t >
simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SRC_XMLINPUT_SIMULATION_H
