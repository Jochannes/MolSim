/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <sstream>
#include <log4cxx/logger.h>

using namespace log4cxx;

LoggerPtr Particlelogger(Logger::getLogger("MolSim.Particle"));

//initialize static Lennard-Jones default parameters
double Particle::def_epsilon = 5.0;
double Particle::def_sigma = 1.0;

/**
 * \brief Initializes the particle, defining its type.
 * @param type_arg Type of the particle
 */
Particle::Particle(int type_arg, bool virt_arg) :
		f(0.0), old_f(0.0), m(0.0), epsilon(def_epsilon), sigma(def_sigma), type(
				type_arg), virt(virt_arg), id(-1) {
	for(int i=0; i<8; i++) neighbors[i]=-1;
	LOG4CXX_TRACE(Particlelogger, "Particle generated!");
}

/**
 * \brief Copies the particle from another one.
 * @param other Particle to copy
 */
Particle::Particle(const Particle& other) :
		x(other.x), v(other.v), f(other.f), old_f(other.old_f), m(other.m), epsilon(
				other.epsilon), sigma(other.sigma), type(other.type), virt(other.virt), id(other.id) {
	for(int i=0; i<8; i++)
		this->neighbors[i] = other.neighbors[i];
	LOG4CXX_TRACE(Particlelogger, "Particle generated by copy!");
}

/**
 * \brief Initializes the particle with values.
 * @param type_arg Type of the particle
 * @param x_arg Initial particle position
 * @param v_arg Initial particle velocity
 * @param m_arg Particle mass
 * @param epsilon_arg Lennard-Jones parameter epsilon for this particle
 * @param sigma_arg Lennard-Jones parameter sigma for this particle
 */
Particle::Particle(utils::Vector<double, 3> x_arg,
		utils::Vector<double, 3> v_arg, double m_arg, int type_arg,
		double epsilon_arg, double sigma_arg, bool virt_arg, int id_arg)
	:
		x(x_arg), v(v_arg), m(m_arg), epsilon(epsilon_arg), sigma(sigma_arg),
		type(type_arg), f(0.0), old_f(0.0), virt(virt_arg), id(id_arg)
{
	for(int i=0; i<8; i++) neighbors[i]=-1;
	LOG4CXX_TRACE(Particlelogger, "Particle generated!");
}

/**
 * \brief Initializes the particle with values.
 * @param x_arg Initial particle position
 * @param v_arg Initial particle velocity
 * @param f_arg Current force
 * @param old_f_arg Old force
 * @param m_arg Particle mass
 * @param epsilon_arg Lennard-Jones parameter epsilon for this particle
 * @param sigma_arg Lennard-Jones parameter sigma for this particle
 * @param type_arg Type of the particle
 */
Particle::Particle(utils::Vector<double, 3> x_arg, utils::Vector<double, 3> v_arg,
		utils::Vector<double, 3> f_arg, utils::Vector<double, 3> old_f_arg,
		double m_arg, double epsilon_arg, double sigma_arg, int type_arg, bool virt_arg, int id_arg)
	:
		x(x_arg), v(v_arg), f(f_arg), old_f(old_f_arg), m(m_arg),
		epsilon(epsilon_arg), sigma(sigma_arg), type(type_arg), virt(virt_arg), id(id_arg)
{
	for(int i=0; i<8; i++) neighbors[i]=-1;
	LOG4CXX_TRACE(Particlelogger, "Particle generated!");
}

/**
 * \brief Deconstructs the particle.
 */
Particle::~Particle() {
	LOG4CXX_TRACE(Particlelogger, "Particle destructed!");
}

/**
 * \brief Returns the particle position.
 */
utils::Vector<double, 3>& Particle::getX() {
	return x;
}

/**
 * \brief Returns the particle velocity.
 */
utils::Vector<double, 3>& Particle::getV() {
	return v;
}

/**
 * \brief Returns the force currently acting on the particle.
 */
utils::Vector<double, 3>& Particle::getF() {
	return f;
}

/**
 * \brief Returns the force that acted on the particle in the last iteration step.
 */
utils::Vector<double, 3>& Particle::getOldF() {
	return old_f;
}

/**
 * \brief Returns the particle mass.
 */
double Particle::getM() {
	return m;
}

/**
 * \brief Returns the Lennard-Jones parameter epsilon for this particle.
 */
double Particle::getEpsilon() {
	return epsilon;
}

/**
 * \brief Returns the Lennard-Jones parameter sigma for this particle.
 */
double Particle::getSigma() {
	return sigma;
}

/**
 * \brief Returns the particle type.
 */
int Particle::getType() {
	return type;
}

/**
 * \brief sets the particle type.
 */
void Particle::setType(int type) {
	this->type = type;
}

/**
 * \brief Returns if the particle is virtual.
 */
bool Particle::getVirtual() {
	return virt;
}

/**
 * \brief Returns a string with all particle parameters.
 */
std::string Particle::toString() {
	std::stringstream stream;
	stream << "Particle: X:" << x << " v: " << v << " f: " << f << " old_f: "
			<< old_f << " type: " << type;
	return stream.str();
}

/**
 * \brief Returns if the other particle has the same type, position, velocity, mass, current and old force.
 * @param other Particle to compare to
 */
bool Particle::operator ==(Particle& other) {
	if(	(x == other.x) && (v == other.v) && (f == other.f) && (old_f == other.old_f) &&
		(m == other.m) && (epsilon == other.epsilon) && (sigma == other.sigma) &&
		(type == other.type) ) {
		return true;
	}
	return false;
}

/**
 * \brief Passes a string with all particle parameters.
 */
std::ostream& operator<<(std::ostream& stream, Particle& p) {
	stream << p.toString();
	return stream;
}

/**
 * \brief Gets the id of the particle.
 *
 * @return ID of particle.
 */
int Particle::getID() {
	return id;
}

/**
 * \brief Sets the id of the particle.
 *
 * @param new ID of particle.
 */
void Particle::setID(int new_id) {
	id = new_id;
}

/**
 * \brief Gets a surrounding particle.
 *
 * @param side Number indicating on which side the neighbor is.
 * @return ID of the neighbor particle.
 */
int Particle::getNeighbor(int side) {
	return neighbors[side];
}

/**
 * \brief Defines another particle as a neighbor to this particle.
 *
 * @param side Number indicating on which side the neighbor is.
 * @param id_neighbor ID of the particle to define as a neighbor.
 */
void Particle::setNeighbor(int side, int id_neighbor) {
	neighbors[side] = id_neighbor;
}

/**
 * \brief Defines another particle as a neighbor to this particle.
 *
 * @param side Number indicating on which side the neighbor is.
 * @param p The particle to define as a neighbor.
 */
void Particle::setNeighbor(int side, Particle& p) {
	neighbors[side] = p.id;
}

/**
 * \brief Determines whether a particle is a direct neighbor of this particle
 *
 * @param p The other particle
 * @return Boolean value indicating direct neighborhood.
 */
bool Particle::isDirectNeighbor(Particle& p) {
	bool result = false;

	for(int i=1; i < 8; i += 2) {
		if( neighbors[i] == p.id ) {
			result = true;
		}
	}
	return result;
}

/**
 * \brief Determines whether a particle is a diagonal neighbor of this particle
 *
 * @param p The other particle
 * @return Boolean value indicating diagonal neighborhood.
 */
bool Particle::isDiagNeighbor(Particle& p) {
	bool result = false;

	for(int i=0; i < 8; i += 2) {
		if( neighbors[i] == p.id ) {
			result = true;
		}
	}
	return result;
}
